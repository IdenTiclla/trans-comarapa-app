version: '3.8'

services:
  # Base de datos MySQL
  db:
    image: mysql:8.0
    restart: unless-stopped
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=trans_comarapa
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/scripts/db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trans-comarapa-network
    command: --default-authentication-plugin=mysql_native_password

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      target: production
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+pymysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/trans_comarapa
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - DEBUG=false
    depends_on:
      db:
        condition: service_healthy
    networks:
      - trans-comarapa-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend (Nuxt.js)
  frontend:
    build:
      context: ./frontend
      target: production
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NUXT_PUBLIC_API_BASE_URL=${NUXT_PUBLIC_API_BASE_URL:-http://localhost:8000/api/v1}
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - trans-comarapa-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx como proxy reverso (opcional para producci√≥n)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - trans-comarapa-network

networks:
  trans-comarapa-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local 